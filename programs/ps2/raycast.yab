open window 640, 512
gosub flipscreen

screenWidth = 40
colored = 1
textured = 1
smoothTextures = 1
cellShaded = 16
cellLines = 0
ceiling = 0
ambientLight = 1
texSize = 1
minWallDist = 1 / 4
lightDist = 26 / (ceiling * 5 + 1)
nFOV = 48 / 180 * pi

texWall = 0
texFloor = 1
texCeiling = 2
read textures, texWidth, texHeight
dim textures(textures - 1, texHeight - 1, texWidth - 1)
for t = 0 to textures - 1
 for y = 0 to texHeight - 1
  for x = 0 to texWidth - 1
   read textures(t, y, x)
  next
 next
next
read mapWidth, mapHeight
dim worldMap(mapHeight - 1, mapWidth - 1)
for y = 0 to mapHeight - 1
 for x = 0 to mapWidth - 1
  read t
  if t = 0 worldMap(y, x) = -int(ran(8)) - 1
  if t > 0 worldMap(y, x) = 1 + int(ran(8))
 next
next
read posX, posY, dir
screenHeight = screenWidth / 5 * 4
if cellShaded < 2 cellShaded = 256
dim video(screenHeight - 1, screenWidth - 1)
pixSize = 640 / screenWidth
closeRed = 0
closeGreen = 0
closeBlue = 256
distRed = 256 * (1 - ceiling) * (ambientLight * 0 + 1)
distGreen = 256 * (1 - ceiling) * (ambientLight * 0 + 1)
distBlue = 256 * (1 - ceiling) * (ambientLight * 0 + 1)

label gameloop
 k = peek("port1")
 info = abs(sig(and(k, 1)) - info)
 zoomExp = min(max(-3, zoomExp + (sig(and(k, 2 ^ 9)) - sig(and(k, 2 ^ 8)))), 10)
 zoom = 2 ^ zoomExp
 FOV = atan(tan(nFOV / 2) / zoom)
 rotSpeed = (sig(and(k, 2 ^ 11)) - sig(and(k, 2 ^ 10))) * 5 / zoom
 dir = mod(dir + rotSpeed + 360, 360)
 dirX = cos(dir / 180 * pi)
 dirY = sin(dir / 180 * pi)
 moveSpeed = (sig(and(k, 16)) - sig(and(k, 64))) / 8
 strafeSpeed = (sig(and(k, 32)) - sig(and(k, 128))) / 8
 speed = 1 / sqrt(sig(moveSpeed) ^ 2 + sig(strafeSpeed) ^ 2)
 moveSpeed = moveSpeed * speed
 strafeSpeed = strafeSpeed * speed
 posX = min(max(minWallDist, posX + dirX * moveSpeed - dirY * strafeSpeed), mapWidth - minWallDist)
 posY = min(max(minWallDist, posY + dirY * moveSpeed + dirX * strafeSpeed), mapHeight - minWallDist)
 edgeX = int(posX + 1 / 2)
 edgeY = int(posY + 1 / 2)
 mapX = int(posX) + sig(frac(posX) - 1 / 2)
 mapY = int(posY) + sig(frac(posY) - 1 / 2)
 if abs(edgeX - posX) < minWallDist and worldMap(posY, mapX) > 0 posX = edgeX - sig(frac(posX) - 1 / 2) * minWallDist
 if abs(edgeY - posY) < minWallDist and worldMap(mapY, posX) > 0 posY = edgeY - sig(frac(posY) - 1 / 2) * minWallDist
 if sqrt((edgeX - posX) ^ 2 + (edgeY - posY) ^ 2) < minWallDist and worldMap(mapY, mapX) > 0 then
  a = atan(posY - edgeY, posX - edgeX)
  posX = edgeX + minWallDist * cos(a)
  posY = edgeY + minWallDist * sin(a)
 fi
 gosub drawscreen
goto gameloop

label drawscreen
 tanFOV = tan(FOV)
 for x = 0 to screenWidth - 1
  cameraX = tanFOV * ((2 * x + 1) / screenWidth - 1)
  rayDirX = dirX - dirY * cameraX
  rayDirY = dirY + dirX * cameraX
  rayLength = sqrt(rayDirX ^ 2 + rayDirY ^ 2)
  mapX = int(posX)
  mapY = int(posY)
  deltaDistX = sqrt(1 + rayDirY ^ 2 / rayDirX ^ 2)
  deltaDistY = sqrt(1 + rayDirX ^ 2 / rayDirY ^ 2)
  stepX = sig(rayDirX)
  stepY = sig(rayDirY)
  sideDistX = stepX * (mapX - posX + (stepX + 1) / 2) * deltaDistX
  sideDistY = stepY * (mapY - posY + (stepY + 1) / 2) * deltaDistY
  hit = 0
  while (hit < 1)
   if sideDistX < sideDistY then
    sideDistX = sideDistX + deltaDistX
    mapX = mapX + stepX
    side = 0
   else
    sideDistY = sideDistY + deltaDistY
    mapY = mapY + stepY
    side = 1
   fi
   hit = worldMap(mapY, mapX)
  wend
  if side = 0 then
   perpWallDist = (mapX - posX + (1 - stepX) / 2) / rayDirX
   wallX = texSize * (1 - stepX) / 2 + stepX * mod(posY + perpWallDist * rayDirY, texSize)
  else
   perpWallDist = (mapY - posY + (1 - stepY) / 2) / rayDirY
   wallX = texSize * (stepY + 1) / 2 - stepY * mod(posX + perpWallDist * rayDirX, texSize)
  fi
  lineHeight = screenHeight / perpWallDist / tanFOV / 8 * 5 + 1 / 2
  lineStart = screenHeight / 2 - lineHeight / 2
  drawStart = max(0, int(lineStart + 1 / 2))
  drawEnd = screenHeight - drawStart
  t = worldMap(mapY, mapX) - 1
  if textured = 0 then
   r = ambientLight * (64 + 128 * int(t / 4)) * (3 / 4 + side / 2)
   g = ambientLight * (64 + 128 * mod(int(t / 2), 2)) * (3 / 4 + side / 2)
   b = ambientLight * (64 + 128 * mod(t, 2)) * (3 / 4 + side / 2)
   realWallDist = 1 + perWallDist * rayLength / lightDist
   c = 65536 * int(min(max(0, distRed - (distRed - r) / realWallDist), 255)) + 256 * int(min(max(0, distGreen - (distGreen - g) / realWallDist), 255)) + int(min(max(0, distBlue - (distBlue - b) / realWallDist), 255))
   for y = drawStart to drawEnd - 1
    video(y, x) = c
   next
  else
   texX = mod(int(wallX * texWidth / texSize - smoothTextures / 2 + texWidth), texWidth)
   if smoothTextures = 1 texFracX = frac(wallX * texWidth / texSize + 1 / 2)
   for y = drawStart to drawEnd - 1
    wallY = (y + 1 / 2 - lineStart) / lineHeight
    texY = mod(int(wallY * texHeight / texSize - smoothTextures / 2 + texHeight), texHeight)
    if smoothTextures = 1 then
     texFracY = frac(wallY * texHeight / texSize + 1 / 2)
     c = (1 - texFracY) * ((1 - texFracX) * textures(texWall, texY, texX) + texFracX * textures(texWall, texY, mod(texX + 1, texWidth))) + texFracY * ((1 - texFracX) * textures(texWall, mod(texY + 1, texHeight), texX) + texFracX * textures(texWall, mod(texY + 1, texHeight), mod(texX + 1, texWidth)))
    else
     c = textures(texWall, texY, texX)
    fi
    c = ambientLight * 128 * c / 99 * (3 / 4 + side / 2)
    r = c
    g = c
    b = c
    realWallDist = 1 + perpWallDist * sqrt(rayLength ^ 2 + (((8 * y + 4) / screenHeight - 4) / 5 * tanFOV) ^ 2) / lightDist
    c = 65536 * int(min(max(0, distRed - (distRed - r) / realWallDist), 255)) + 256 * int(min(max(0, distGreen - (distGreen - g) / realWallDist), 255)) + int(min(max(0, distBlue - (distBlue - b) / realWallDist), 255))
    video(y, x) = c
   next
  fi
  for y = drawEnd to screenHeight - 1
   perpFloorDist = 5 / tanFOV / ((16 * y + 7.9) / screenHeight - 8)
   floorX = posX + perpFloorDist * rayDirX
   floorY = posY + perpFloorDist * rayDirY
   t = -worldMap(floorY, floorX) - 1
   floorX = mod(floorX, texSize)
   floorY = mod(floorY, texSize)
   if textured = 0 then
    r = ambientLight * (64 + 128 * int(t / 4))
    g = ambientLight * (64 + 128 * mod(int(t / 2), 2))
    b = ambientLight * (64 + 128 * mod(t, 2))
   else
    texX = mod(int(floorX * texWidth / texSize - smoothTextures / 2 + texWidth), texWidth)
    texY = mod(int(floorY * texHeight / texSize - smoothTextures / 2 + texHeight), texHeight)
    if smoothTextures = 1 then
     texFracX = frac(floorX * texWidth / texSize + 1 / 2)
     texFracY = frac(floorY * texHeight / texSize + 1 / 2)
     c = (1 - texFracY) * ((1 - texFracX) * textures(texFloor, texY, texX) + texFracX * textures(texFloor, texY, mod(texX + 1, texWidth))) + texFracY * ((1 - texFracX) * textures(texFloor, mod(texY + 1, texHeight), texX) + texFracX * textures(texFloor, mod(texY + 1, texHeight), mod(texX + 1, texWidth)))
    else 
     c = textures(texFloor, texY, texX)
    fi
    c = ambientLight * (96 + 64 * c / 99)
    r = c * 0
    g = c
    b = c * 0
   fi
   realFloorDist = 1 + perpFloorDist * rayLength / lightDist
   c = 65536 * int(min(max(0, distRed - (distRed - r) / realFloorDist), 255)) + 256 * int(min(max(0, distGreen - (distGreen - g) / realFloorDist), 255)) + int(min(max(0, distBlue - (distBlue - b) / realFloorDist), 255))
   video(y, x) = c
   if ceiling = 1 and textured = 1 then
    if smoothTextures = 1 then
     texFracX = frac(floorX * texWidth / texSize + 1 / 2)
     texFracY = frac(floorY * texHeight / texSize + 1 / 2)
     c = (1 - texFracY) * ((1 - texFracX) * textures(texCeiling, texY, texX) + texFracX * textures(texCeiling, texY, mod(texX + 1, texWidth))) + texFracY * ((1 - texFracX) * textures(texCeiling, mod(texY + 1, texHeight), texX) + texFracX * textures(texCeiling, mod(texY + 1, texHeight), mod(texX + 1, texWidth)))
    else 
     c = textures(texCeiling, texY, texX)
    fi
    c = ambientLight * 128 * c / 99
    r = c
    g = c * 2 / 3
    b = c * 0
    c = 65536 * int(min(max(0, distRed - (distRed - r) / realFloorDist), 255)) + 256 * int(min(max(0, distGreen - (distGreen - g) / realFloorDist), 255)) + int(min(max(0, distBlue - (distBlue - b) / realFloorDist), 255))
   elseif ceiling = 0 then
    sunDist = sqrt((x / screenWidth - 1 / 4) ^ 2 + (y / screenWidth - 3 / 4) ^2) * 75
    c = 65536 * int(min(max(0, distRed - (distRed - ambientLight * closeRed) / perpFloorDist * (1 - 1 / sunDist) + 255 / sunDist), 255)) + 256 * int(min(max(0, distGreen - (distGreen - ambientLight * closeGreen) / perpFloorDist * (1 - 1 / sunDist) + 255 / sunDist), 255)) + int(min(max(0, distBlue - (distBlue - ambientLight * closeBlue) / perpFloorDist * (1 - 1 / sunDist) + 255 / sunDist), 255))
   fi
   video(screenHeight - y - 1, x) = c
  next
 next
 
 for y = 0 to screenHeight - 1
  for x = 0 to screenWidth - 1
   c = video(y, x)
   red = int(c / 65536)
   green = mod(int(c / 256), 256)
   blue = mod(c, 256)
   grey = (red + green + blue) / 3 * (1 - colored)
   r = int(255 / (cellShaded - 1) * int((red * colored + grey) * (cellShaded - 1) / 255 + 1 / 2))
   g = int(255 / (cellShaded - 1) * int((green * colored + grey) * (cellShaded - 1) / 255 + 1 / 2))
   b = int(255 / (cellShaded - 1) * int((blue * colored + grey) * (cellShaded - 1) / 255 + 1 / 2))
   video(y, x) = 65536 * r + 256 * g + b
  next
 next
 
 for y = 0 to screenHeight - 1
  for x = 0 to screenWidth - 1
   c = video(y, x)
   r = int(c / 65536)
   g = mod(int(c / 256), 256)
   b = mod(c, 256)
   if (cellLines > 0) then
    Xc = (x + 1 / 2) / screenWidth * 640
    Yc = (y + 1 / 2) / screenHeight * 512
    if (video(y, max(0, Xc - 1) / 640 * screenWidth - 1 / 2) + video(y, min(Xc + 1, 639) / 640 * screenWidth - 1 / 2) + video(max(0, Yc - 1) / 512 * screenHeight - 1 / 2, x) + video(min(Yc + 1, 511) / 512 * screenHeight - 1 / 2, x)) <> 4 * c then
     r = r / 2
     g = g / 2
     b = b / 2
    fi
   fi
   setrgb 1, r, g, b
   fill rect x * pixSize, y * pixSize, (x + 1) * pixSize, (y + 1) * pixSize
  next
 next
 
 if info = 1 then
  setrgb 1, 255, 255, 255
  text 630, 0, "X-position: " + str$(posX), "rt"
  text 630, 20, "Y-position: " + str$(posY), "rt"
  text 630, 40, "Direction: " + str$(int(dir)) + "°" + str$(int(60 * frac(dir))) + "'" + str$(int(60 * frac(60 * dir))) + "\"", "rt"
  text 630, 60, "Zoom: " + str$(zoom) + "x", "rt"
 fi
label flipscreen
 setdrawbuf draw
 draw = 1 - draw
 setdispbuf draw
return


label textures
 data 3
 data 16, 16

label wall
 data 62,46,75,60,62,61,60,62,63,47,80,61,59,59,63,63
 data 44,27,60,45,45,45,43,44,46,31,65,46,43,45,44,46
 data 44,25,59,45,44,45,46,47,50,29,60,43,40,43,44,46
 data 25,08,42,28,29,30,29,27,29,11,44,27,24,22,25,26
 data 59,61,60,61,62,50,80,64,62,65,65,61,56,39,75,61
 data 40,40,42,45,47,35,70,50,48,52,50,46,44,23,57,41
 data 41,42,42,46,50,37,74,57,55,56,53,50,45,24,57,41
 data 22,22,24,30,36,20,58,44,47,45,40,31,26,06,40,20
 data 53,39,72,63,68,72,75,79,83,62,90,63,54,54,56,56
 data 37,20,55,44,53,55,56,60,60,46,73,50,44,39,39,41
 data 36,20,53,45,52,55,52,55,54,40,72,54,49,43,39,38
 data 17,00,37,27,36,34,34,32,32,17,53,35,33,30,23,18
 data 50,50,53,61,64,49,81,64,62,64,66,68,67,46,73,53
 data 35,36,37,45,48,29,63,42,44,47,49,49,49,29,56,39
 data 38,40,38,43,45,29,62,43,47,46,47,47,50,31,60,39
 data 28,28,26,26,27,12,45,27,30,30,31,30,30,13,46,27
 
label floor
 data 14,48,62,46,73,32,31,36,52,61,85,67,44,48,37,33
 data 32,36,47,60,80,54,34,68,60,66,94,71,52,27,25,47
 data 32,33,00,53,91,67,44,50,90,82,88,78,41,37,41,34
 data 62,43,13,24,54,64,71,61,34,53,81,47,31,25,65,49
 data 55,46,07,33,61,57,44,29,02,35,57,60,30,41,59,59
 data 53,57,36,45,48,45,24,33,32,71,81,52,36,40,28,54
 data 28,35,74,75,61,66,16,34,24,78,87,50,38,40,37,16
 data 41,41,63,59,99,77,31,51,22,47,40,52,51,35,64,47
 data 39,34,45,43,64,67,21,35,70,46,29,27,22,60,76,44
 data 35,27,25,59,80,52,05,46,45,30,53,46,50,73,68,43
 data 27,46,64,70,62,31,02,36,29,46,53,26,32,31,50,39
 data 37,35,58,58,49,37,11,29,58,74,54,54,34,67,56,56
 data 41,51,63,77,53,50,44,63,59,59,67,79,65,64,66,66
 data 50,58,87,47,23,20,26,20,25,54,66,70,41,47,44,50
 data 36,77,71,30,14,42,24,13,12,54,44,66,48,49,48,39
 data 60,63,81,34,36,12,16,13,20,41,87,47,39,44,41,38
 
label ceiling
 data 75,74,62,50,30,67,61,54,37,79,63,60,45,32,76,75
 data 61,57,63,49,30,53,47,39,22,64,47,59,43,31,60,62
 data 59,56,65,43,28,51,48,46,24,69,49,55,43,32,62,62
 data 57,54,65,43,32,50,47,44,28,74,53,62,46,32,59,62
 data 39,38,55,46,27,31,29,27,13,59,43,68,48,33,42,42
 data 99,76,59,38,21,61,57,60,60,62,65,70,52,34,74,60
 data 80,60,63,38,17,44,42,42,38,44,47,71,51,34,55,40
 data 77,57,55,41,17,49,48,42,39,41,49,71,55,38,53,35
 data 74,58,55,40,20,49,50,42,40,43,44,73,59,42,47,33
 data 72,57,58,43,24,50,49,42,41,38,38,74,59,41,45,29
 data 49,33,53,40,24,29,26,25,21,21,23,67,52,39,28,10
 data 51,55,54,40,29,76,77,77,74,74,77,63,48,38,72,72
 data 36,38,56,37,26,61,60,61,58,58,58,57,41,32,56,53
 data 38,40,63,42,23,59,63,61,61,60,61,56,41,29,54,51
 data 44,44,61,49,31,57,60,61,61,59,60,56,39,30,54,52
 data 30,29,62,45,35,38,40,40,41,41,40,60,45,29,37,36

label level1
 data 31, 56
 data 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
 data 1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
 data 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1
 data 1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1
 data 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1
 data 1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1
 data 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1
 data 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0
 data 15.5, 54.5, -90
 